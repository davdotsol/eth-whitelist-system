{"version":3,"sources":["getWeb3.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","whitelist","accounts","contract","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","WhitelistContract","networks","instance","Contract","abi","address","setState","runInit","alert","error","methods","getAddresses","call","value","send","from","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","Form","Group","controlId","Control","type","id","ref","input","Button","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07763125.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport WhitelistContract from \"./contracts/Whitelist.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Table from \"react-bootstrap/Table\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { whitelist: null, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = WhitelistContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        WhitelistContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async () => {\n    const { accounts, contract } = this.state;\n\n    // Get authorized account list\n    const whitelist = await contract.methods.getAddresses().call();\n    // Update state with the result.\n    this.setState({ whitelist: whitelist });\n  };\n\n  whitelist = async () => {\n    const { accounts, contract } = this.state;\n    const address = this.address.value;\n\n    // Add an authorized account throught contract methods\n    await contract.methods.whitelist(address).send({ from: accounts[0] });\n    // Get authorized account list\n    this.runInit();\n  };\n\n  render() {\n    const { whitelist } = this.state;\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div>\n          <h2 className=\"text-center\">\n            Blockchain Whitelist System powered by Ethereum\n          </h2>\n          <hr></hr>\n          <br></br>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Card style={{ width: \"50rem\" }}>\n            <Card.Header>\n              <strong>Authorized Accounts</strong>\n            </Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {whitelist !== null &&\n                        whitelist.map((a) => (\n                          <tr>\n                            <td>{a}</td>\n                          </tr>\n                        ))}\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Card style={{ width: \"50rem\" }}>\n            <Card.Header>\n              <strong>Authorized New Account</strong>\n            </Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formAddress\">\n                <Form.Control\n                  type=\"text\"\n                  id=\"address\"\n                  ref={(input) => {\n                    this.address = input;\n                  }}\n                />\n              </Form.Group>\n              <Button onClick={this.whitelist} variant=\"dark\">\n                {\" \"}\n                Autoriser{\" \"}\n              </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}